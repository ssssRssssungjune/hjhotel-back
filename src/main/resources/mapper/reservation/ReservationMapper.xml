<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hjhotelback.mapper.reservation.ReservationMapper">
   
     <!-- 관리자 예약목록 조회 -->
    <select 
        id="getReservationList" 
        parameterType="map" 
        resultType="com.hjhotelback.dto.reservation.ResReservation$Detail"
    >
        SELECT RS.reservation_id AS reservation_id, M.name AS member_name, RT.name AS room_type, RT.base_occupancy AS base_occupancy, 
            RT.max_occupancy AS max_occupancy, R.room_number AS room_number, RS.check_in AS check_in, RS.check_out AS check_out, 
            RS.status AS status, RS.total_amount AS total_amount 
        FROM (
                SELECT * 
                FROM reservation
                 <where>
                    <choose>
                        <when test="lastValue != null">
                            <!-- lastValue가 null이 아닌 경우, lastValue 기준으로 조건 설정 -->
                            <if test="direction == 'next'">
                                <!-- 다음 페이지: lastValue보다 큰 값 -->
                                AND reservation_id &gt; #{lastValue}
                                ORDER BY reservation_id ASC 
                            </if>
                            <if test="direction == 'prev'">
                                <!-- 이전 페이지: lastValue보다 작은 값 -->
                                AND reservation_id &lt; #{lastValue}
                                ORDER BY reservation_id DESC 
                            </if>
                        </when>
                        <otherwise>
                            <!-- lastValue가 null일 경우 (첫 번째 페이지 등) -->
                            AND 1=1
                            ORDER BY reservation_id ASC 
                        </otherwise>
                    </choose>
                </where>
                LIMIT #{size}
        ) as RS 
        JOIN member AS M ON RS.member_id=M.member_id
        JOIN room AS R ON RS.room_id=R.room_id
        JOIN room_type AS RT ON R.room_type_id = RT.room_type_id
        WHERE #{filterValue} IS NULL OR #{colName} = #{filterValue}
    </select>

    <select id="getLastReservationId" resultType="Integer">
		SELECT reservation_id FROM reservation ORDER BY reservation_id DESC LIMIT 1;
	</select>

    <!-- 사용자/관리자 예약상세 조회 -->
    <select id="getReservationById" parameterType="int" resultType="com.hjhotelback.dto.reservation.ResReservation$Detail">
        select RS.reservation_id AS reservation_id, M.name AS member_name, RT.name AS room_type, RT.base_occupancy AS base_occupancy, 
            RT.max_occupancy AS max_occupancy, R.room_number AS room_number, RS.check_in AS check_in, RS.check_out AS check_out, 
            RS.status AS status, RS.total_amount AS total_amount 
        FROM (SELECT * from reservation where reservation_id=#{reservationId}) as RS 
        JOIN member AS M ON RS.member_id=M.member_id
        JOIN room AS R ON RS.room_id=R.room_id
        JOIN room_type AS RT ON R.room_type_id = RT.room_type_id;
    </select>

    <!-- 사용자 예약 생성 -->
    <insert id="createReservation" parameterType="com.hjhotelback.dto.reservation.ReqReservation$Create" statementType="PREPARED">
        <selectKey keyProperty="res.reservationId" order="AFTER" resultType="long">
            SELECT LAST_INSERT_ID() AS reservationId
        </selectKey>
        INSERT INTO reservation (member_id, room_id, check_in, check_out, total_amount)
        SELECT #{req.memberId}, #{req.roomId}, #{req.checkIn}, #{req.checkOut}, #{req.totalAmount}
        WHERE NOT EXISTS (
            SELECT 1 
            FROM reservation 
            WHERE room_id = #{req.roomId} 
            AND NOT (#{req.checkOut} &lt;= check_in OR #{req.checkIn} &gt;= check_out)
        );
    </insert>

    <!-- 사용자/관리자 예약 날짜 변경 -->
    <update id="updateReservationDate" parameterType="com.hjhotelback.dto.reservation.ReqReservation$UpdateDate">
        UPDATE reservation SET check_in = #{checkIn}, check_out = #{checkOut} WHERE reservation_id = #{reservationId}; 
    </update>

    <!-- 관리자 예약 객실 변경 -->
    <update id="updateReservationRoom" parameterType="com.hjhotelback.dto.reservation.ReqReservation$UpdateRoom">
        UPDATE reservation SET room_id = #{roomId} WHERE reservation_id = #{reservationId};
    </update>

    <!-- 관리자 예약 상태 변경 24.11.21 한택 [보류]-{CANCELLED도 포함}-->
    <update id="updateReservationState" parameterType="com.hjhotelback.dto.reservation.ReqReservation$UpdateState">
        UPDATE reservation SET status = #{status} WHERE reservation_id = #{reservationId};
    </update>

    <!-- 사용자 예약 취소 status==PENDING 일때 -->
   <delete id="deleteReservation" parameterType="com.hjhotelback.dto.reservation.ReqReservation$Delete">
        DELETE FROM reservation WHERE reservation_id = #{reservationId} AND status = 'PENDING'
   </delete> 



    <select id="getRoomReservationSummary" parameterType="java.time.LocalDate" resultType="com.hjhotelback.dto.reservation.ResReservation$Summary">
        SELECT 
            RT.room_type_id AS room_type_id,
            D.date AS reservation_date,
            COUNT(R.room_id) AS booked_rooms
        FROM 
            room_type AS RT
        LEFT JOIN 
            room AS R ON RT.room_type_id = R.room_type_id
        LEFT JOIN 
            reservation AS RS ON R.room_id = RS.room_id
        JOIN 
            (
                SELECT #{date} + INTERVAL n DAY AS date
                FROM (
                    SELECT @rownum := @rownum + 1 AS n
                    FROM information_schema.columns, 
                    (SELECT @rownum := -1) r
                    LIMIT 31
                ) AS days
                WHERE MONTH(#{date} + INTERVAL n DAY) = MONTH(#{date})
                    AND #{date} + INTERVAL n DAY &gt;= #{date}
            ) AS D
            ON RS.check_in &lt;= D.date AND RS.check_out &gt; D.date
        WHERE 
            RS.STATUS != 'CANCELLED'
        GROUP BY 
            RT.room_type_id, RT.name, RT.base_occupancy, RT.max_occupancy, RT.base_price, D.date
        ORDER BY 
            D.date ASC, RT.room_type_id ASC;
    </select>

    <select id="getRoomSample" resultType="com.hjhotelback.dto.reservation.ResReservation$RoomSample">
        SELECT 
            RT.room_type_id AS room_type_id,
            RT.name AS room_type, 
            RT.description AS description, 
            RT.base_occupancy AS base_occupancy, 
            RT.max_occupancy AS max_occupancy, 
            RT.base_price AS base_price,
            COUNT(R.room_id) AS room_count
        FROM 
            room_type AS RT
        LEFT JOIN 
            room AS R 
        ON 
            RT.room_type_id = R.room_type_id
        GROUP BY 
            RT.room_type_id, RT.name, RT.description, RT.base_occupancy, RT.max_occupancy, RT.base_price
        ORDER BY 
            RT.room_type_id ASC;
    </select>

</mapper>